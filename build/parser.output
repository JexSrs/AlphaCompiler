State 42 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmtlist

    2 stmtlist: stmtlist stmt
    3         | %empty

    4 stmt: expr semicolon
    5     | ifstmt
    6     | whilestmt
    7     | forstmt
    8     | returnstmt
    9     | BREAK semicolon
   10     | CONTINUE semicolon
   11     | block
   12     | funcdef
   13     | semicolon

   14 expr: assignexpr
   15     | expr plus expr
   16     | expr minus expr
   17     | expr MUL expr
   18     | expr DIV expr
   19     | expr MOD expr
   20     | expr greater expr
   21     | expr gequal expr
   22     | expr lesser expr
   23     | expr lequal expr

   24 $@1: %empty

   25 expr: expr eequal $@1 expr

   26 $@2: %empty

   27 expr: expr nequal $@2 expr

   28 $@3: %empty

   29 expr: expr AND $@3 M expr

   30 $@4: %empty

   31 expr: expr OR $@4 M expr
   32     | term

   33 term: openPar expr closePar
   34     | minus expr
   35     | NOT expr
   36     | pplus lvalue
   37     | lvalue pplus
   38     | mminus lvalue
   39     | lvalue mminus
   40     | primary

   41 $@5: %empty

   42 assignexpr: lvalue equal $@5 expr

   43 primary: lvalue
   44        | call
   45        | objectdef
   46        | openPar funcdef closePar
   47        | const

   48 lvalue: ID
   49       | local ID
   50       | ccolon ID
   51       | member

   52 member: lvalue dot ID
   53       | lvalue openBracket expr closeBracket
   54       | call dot ID
   55       | call openBracket expr closeBracket

   56 call: call openPar elist closePar
   57     | lvalue callsuffix
   58     | openPar funcdef closePar openPar elist closePar

   59 callsuffix: normcall
   60           | methodcall

   61 normcall: openPar elist closePar

   62 methodcall: ddot ID openPar elist closePar

   63 elist: expr
   64      | elist comma expr
   65      | %empty

   66 objectdef: openBracket elist closeBracket
   67          | openBracket indexed closeBracket

   68 indexed: indexedelem
   69        | indexed comma indexedelem

   70 indexedelem: openBlock expr colon expr closeBlock

   71 $@6: %empty

   72 block: openBlock $@6 stmtlist closeBlock

   73 funcArgs: openPar idlist closePar

   74 funcName: ID
   75         | %empty

   76 funcPre: FUNCTION funcName

   77 funcPreArgs: funcPre funcArgs

   78 funcBlockStart: %empty

   79 funcBlockEnd: %empty

   80 funcBody: block

   81 funcdef: funcPreArgs funcBlockStart funcBody funcBlockEnd

   82 const: NUMBER
   83      | STRING
   84      | NIL
   85      | TRUE
   86      | FALSE

   87 idlist: ID
   88       | idlist comma ID
   89       | %empty

   90 ifPrefix: IF openPar expr closePar

   91 elsePrefix: ELSE

   92 ifstmt: ifPrefix stmt
   93       | ifstmt elsePrefix stmt

   94 loopStart: %empty

   95 loopEnd: %empty

   96 loopstmt: loopStart stmt loopEnd

   97 whileStart: WHILE

   98 whileCond: openPar expr closePar

   99 whilestmt: whileStart whileCond loopstmt

  100 N: %empty

  101 M: %empty

  102 forPrefix: FOR openPar elist M semicolon expr semicolon

  103 forstmt: forPrefix N elist closePar N loopstmt N

  104 returnstmt: RETURN semicolon
  105           | RETURN expr semicolon


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    NUMBER <numVal> (258) 82
    IF <strValue> (259) 90
    ELSE <strValue> (260) 91
    WHILE <strValue> (261) 97
    FOR <strValue> (262) 102
    FUNCTION <strValue> (263) 76
    RETURN <strValue> (264) 104 105
    BREAK <strValue> (265) 9
    CONTINUE <strValue> (266) 10
    AND <strValue> (267) 29
    NOT <strValue> (268) 35
    OR <strValue> (269) 31
    local <strValue> (270) 49
    TRUE <strValue> (271) 85
    FALSE <strValue> (272) 86
    NIL <strValue> (273) 84
    STRING <strValue> (274) 83
    ID <strValue> (275) 48 49 50 52 54 62 74 87 88
    equal <strValue> (276) 42
    plus <strValue> (277) 15
    minus <strValue> (278) 16 34
    MUL <strValue> (279) 17
    DIV <strValue> (280) 18
    MOD <strValue> (281) 19
    eequal <strValue> (282) 25
    nequal <strValue> (283) 27
    pplus <strValue> (284) 36 37
    mminus <strValue> (285) 38 39
    greater <strValue> (286) 20
    lesser <strValue> (287) 22
    gequal <strValue> (288) 21
    lequal <strValue> (289) 23
    openBlock <strValue> (290) 70 72
    closeBlock <strValue> (291) 70 72
    openBracket <strValue> (292) 53 55 66 67
    closeBracket <strValue> (293) 53 55 66 67
    openPar <strValue> (294) 33 46 56 58 61 62 73 90 98 102
    closePar <strValue> (295) 33 46 56 58 61 62 73 90 98 103
    semicolon <strValue> (296) 4 9 10 13 102 104 105
    comma <strValue> (297) 64 69 88
    colon <strValue> (298) 70
    ccolon <strValue> (299) 50
    dot <strValue> (300) 52 54
    ddot <strValue> (301) 62
    UMINUS <strValue> (302)


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program (49)
        on left: 1
        on right: 0
    stmtlist (50)
        on left: 2 3
        on right: 1 2 72
    stmt <exprValue> (51)
        on left: 4 5 6 7 8 9 10 11 12 13
        on right: 2 92 93 96
    expr <exprValue> (52)
        on left: 14 15 16 17 18 19 20 21 22 23 25 27 29 31 32
        on right: 4 15 16 17 18 19 20 21 22 23 25 27 29 31 33 34 35 42 53 55 63 64 70 90 98 102 105
    $@1 (53)
        on left: 24
        on right: 25
    $@2 (54)
        on left: 26
        on right: 27
    $@3 (55)
        on left: 28
        on right: 29
    $@4 (56)
        on left: 30
        on right: 31
    term <exprValue> (57)
        on left: 33 34 35 36 37 38 39 40
        on right: 32
    assignexpr <exprValue> (58)
        on left: 42
        on right: 14
    $@5 (59)
        on left: 41
        on right: 42
    primary <exprValue> (60)
        on left: 43 44 45 46 47
        on right: 40
    lvalue <exprValue> (61)
        on left: 48 49 50 51
        on right: 36 37 38 39 42 43 52 53 57
    member <exprValue> (62)
        on left: 52 53 54 55
        on right: 51
    call <exprValue> (63)
        on left: 56 57 58
        on right: 44 54 55 56
    callsuffix <methodCall> (64)
        on left: 59 60
        on right: 57
    normcall <methodCall> (65)
        on left: 61
        on right: 59
    methodcall <methodCall> (66)
        on left: 62
        on right: 60
    elist <exprValue> (67)
        on left: 63 64 65
        on right: 56 58 61 62 64 66 102 103
    objectdef <exprValue> (68)
        on left: 66 67
        on right: 45
    indexed <exprValue> (69)
        on left: 68 69
        on right: 67 69
    indexedelem <exprValue> (70)
        on left: 70
        on right: 68 69
    block <strValue> (71)
        on left: 72
        on right: 11 80
    $@6 (72)
        on left: 71
        on right: 72
    funcArgs (73)
        on left: 73
        on right: 77
    funcName <strValue> (74)
        on left: 74 75
        on right: 76
    funcPre <symbolTable> (75)
        on left: 76
        on right: 77
    funcPreArgs <symbolTable> (76)
        on left: 77
        on right: 81
    funcBlockStart (77)
        on left: 78
        on right: 81
    funcBlockEnd (78)
        on left: 79
        on right: 81
    funcBody <intVal> (79)
        on left: 80
        on right: 81
    funcdef <symbolTable> (80)
        on left: 81
        on right: 12 46 58
    const <exprValue> (81)
        on left: 82 83 84 85 86
        on right: 47
    idlist <intVal> (82)
        on left: 87 88 89
        on right: 73 88
    ifPrefix <intVal> (83)
        on left: 90
        on right: 92
    elsePrefix <intVal> (84)
        on left: 91
        on right: 93
    ifstmt <intVal> (85)
        on left: 92 93
        on right: 5 93
    loopStart (86)
        on left: 94
        on right: 96
    loopEnd (87)
        on left: 95
        on right: 96
    loopstmt <loopStack> (88)
        on left: 96
        on right: 99 103
    whileStart <intVal> (89)
        on left: 97
        on right: 99
    whileCond <intVal> (90)
        on left: 98
        on right: 99
    whilestmt <strValue> (91)
        on left: 99
        on right: 6
    N <intVal> (92)
        on left: 100
        on right: 103
    M <intVal> (93)
        on left: 101
        on right: 29 31 102
    forPrefix <forLoopVal> (94)
        on left: 102
        on right: 103
    forstmt <strValue> (95)
        on left: 103
        on right: 7
    returnstmt <exprValue> (96)
        on left: 104 105
        on right: 8


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (stmtlist)

    program   go to state 1
    stmtlist  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: stmtlist •
    2 stmtlist: stmtlist • stmt

    NUMBER       shift, and go to state 4
    IF           shift, and go to state 5
    WHILE        shift, and go to state 6
    FOR          shift, and go to state 7
    FUNCTION     shift, and go to state 8
    RETURN       shift, and go to state 9
    BREAK        shift, and go to state 10
    CONTINUE     shift, and go to state 11
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBlock    shift, and go to state 22
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    semicolon    shift, and go to state 25
    ccolon       shift, and go to state 26

    $default  reduce using rule 1 (program)

    stmt         go to state 27
    expr         go to state 28
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    objectdef    go to state 35
    block        go to state 36
    funcPre      go to state 37
    funcPreArgs  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifPrefix     go to state 41
    ifstmt       go to state 42
    whileStart   go to state 43
    whilestmt    go to state 44
    forPrefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 3

    0 $accept: program $end •

    $default  accept


State 4

   82 const: NUMBER •

    $default  reduce using rule 82 (const)


State 5

   90 ifPrefix: IF • openPar expr closePar

    openPar  shift, and go to state 48


State 6

   97 whileStart: WHILE •

    $default  reduce using rule 97 (whileStart)


State 7

  102 forPrefix: FOR • openPar elist M semicolon expr semicolon

    openPar  shift, and go to state 49


State 8

   76 funcPre: FUNCTION • funcName

    ID  shift, and go to state 50

    $default  reduce using rule 75 (funcName)

    funcName  go to state 51


State 9

  104 returnstmt: RETURN • semicolon
  105           | RETURN • expr semicolon

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    semicolon    shift, and go to state 52
    ccolon       shift, and go to state 26

    expr        go to state 53
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 10

    9 stmt: BREAK • semicolon

    semicolon  shift, and go to state 54


State 11

   10 stmt: CONTINUE • semicolon

    semicolon  shift, and go to state 55


State 12

   35 term: NOT • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 56
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 13

   49 lvalue: local • ID

    ID  shift, and go to state 57


State 14

   85 const: TRUE •

    $default  reduce using rule 85 (const)


State 15

   86 const: FALSE •

    $default  reduce using rule 86 (const)


State 16

   84 const: NIL •

    $default  reduce using rule 84 (const)


State 17

   83 const: STRING •

    $default  reduce using rule 83 (const)


State 18

   48 lvalue: ID •

    $default  reduce using rule 48 (lvalue)


State 19

   34 term: minus • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 58
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 20

   36 term: pplus • lvalue

    local    shift, and go to state 13
    ID       shift, and go to state 18
    openPar  shift, and go to state 59
    ccolon   shift, and go to state 26

    lvalue  go to state 60
    member  go to state 33
    call    go to state 61


State 21

   38 term: mminus • lvalue

    local    shift, and go to state 13
    ID       shift, and go to state 18
    openPar  shift, and go to state 59
    ccolon   shift, and go to state 26

    lvalue  go to state 62
    member  go to state 33
    call    go to state 61


State 22

   72 block: openBlock • $@6 stmtlist closeBlock

    $default  reduce using rule 71 ($@6)

    $@6  go to state 63


State 23

   66 objectdef: openBracket • elist closeBracket
   67          | openBracket • indexed closeBracket

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBlock    shift, and go to state 64
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr         go to state 65
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 66
    objectdef    go to state 35
    indexed      go to state 67
    indexedelem  go to state 68
    const        go to state 40


State 24

   33 term: openPar • expr closePar
   46 primary: openPar • funcdef closePar
   58 call: openPar • funcdef closePar openPar elist closePar

    NUMBER       shift, and go to state 4
    FUNCTION     shift, and go to state 8
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr         go to state 69
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    objectdef    go to state 35
    funcPre      go to state 37
    funcPreArgs  go to state 38
    funcdef      go to state 70
    const        go to state 40


State 25

   13 stmt: semicolon •

    $default  reduce using rule 13 (stmt)


State 26

   50 lvalue: ccolon • ID

    ID  shift, and go to state 71


State 27

    2 stmtlist: stmtlist stmt •

    $default  reduce using rule 2 (stmtlist)


State 28

    4 stmt: expr • semicolon
   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    AND        shift, and go to state 72
    OR         shift, and go to state 73
    plus       shift, and go to state 74
    minus      shift, and go to state 75
    MUL        shift, and go to state 76
    DIV        shift, and go to state 77
    MOD        shift, and go to state 78
    eequal     shift, and go to state 79
    nequal     shift, and go to state 80
    greater    shift, and go to state 81
    lesser     shift, and go to state 82
    gequal     shift, and go to state 83
    lequal     shift, and go to state 84
    semicolon  shift, and go to state 85


State 29

   32 expr: term •

    $default  reduce using rule 32 (expr)


State 30

   14 expr: assignexpr •

    $default  reduce using rule 14 (expr)


State 31

   40 term: primary •

    $default  reduce using rule 40 (term)


State 32

   37 term: lvalue • pplus
   39     | lvalue • mminus
   42 assignexpr: lvalue • equal $@5 expr
   43 primary: lvalue •
   52 member: lvalue • dot ID
   53       | lvalue • openBracket expr closeBracket
   57 call: lvalue • callsuffix

    equal        shift, and go to state 86
    pplus        shift, and go to state 87
    mminus       shift, and go to state 88
    openBracket  shift, and go to state 89
    openPar      shift, and go to state 90
    dot          shift, and go to state 91
    ddot         shift, and go to state 92

    $default  reduce using rule 43 (primary)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 33

   51 lvalue: member •

    $default  reduce using rule 51 (lvalue)


State 34

   44 primary: call •
   54 member: call • dot ID
   55       | call • openBracket expr closeBracket
   56 call: call • openPar elist closePar

    openBracket  shift, and go to state 96
    openPar      shift, and go to state 97
    dot          shift, and go to state 98

    $default  reduce using rule 44 (primary)


State 35

   45 primary: objectdef •

    $default  reduce using rule 45 (primary)


State 36

   11 stmt: block •

    $default  reduce using rule 11 (stmt)


State 37

   77 funcPreArgs: funcPre • funcArgs

    openPar  shift, and go to state 99

    funcArgs  go to state 100


State 38

   81 funcdef: funcPreArgs • funcBlockStart funcBody funcBlockEnd

    $default  reduce using rule 78 (funcBlockStart)

    funcBlockStart  go to state 101


State 39

   12 stmt: funcdef •

    $default  reduce using rule 12 (stmt)


State 40

   47 primary: const •

    $default  reduce using rule 47 (primary)


State 41

   92 ifstmt: ifPrefix • stmt

    NUMBER       shift, and go to state 4
    IF           shift, and go to state 5
    WHILE        shift, and go to state 6
    FOR          shift, and go to state 7
    FUNCTION     shift, and go to state 8
    RETURN       shift, and go to state 9
    BREAK        shift, and go to state 10
    CONTINUE     shift, and go to state 11
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBlock    shift, and go to state 22
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    semicolon    shift, and go to state 25
    ccolon       shift, and go to state 26

    stmt         go to state 102
    expr         go to state 28
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    objectdef    go to state 35
    block        go to state 36
    funcPre      go to state 37
    funcPreArgs  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifPrefix     go to state 41
    ifstmt       go to state 42
    whileStart   go to state 43
    whilestmt    go to state 44
    forPrefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 42

    5 stmt: ifstmt •
   93 ifstmt: ifstmt • elsePrefix stmt

    ELSE  shift, and go to state 103

    ELSE      [reduce using rule 5 (stmt)]
    $default  reduce using rule 5 (stmt)

    elsePrefix  go to state 104


State 43

   99 whilestmt: whileStart • whileCond loopstmt

    openPar  shift, and go to state 105

    whileCond  go to state 106


State 44

    6 stmt: whilestmt •

    $default  reduce using rule 6 (stmt)


State 45

  103 forstmt: forPrefix • N elist closePar N loopstmt N

    $default  reduce using rule 100 (N)

    N  go to state 107


State 46

    7 stmt: forstmt •

    $default  reduce using rule 7 (stmt)


State 47

    8 stmt: returnstmt •

    $default  reduce using rule 8 (stmt)


State 48

   90 ifPrefix: IF openPar • expr closePar

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 108
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 49

  102 forPrefix: FOR openPar • elist M semicolon expr semicolon

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 109
    objectdef   go to state 35
    const       go to state 40


State 50

   74 funcName: ID •

    $default  reduce using rule 74 (funcName)


State 51

   76 funcPre: FUNCTION funcName •

    $default  reduce using rule 76 (funcPre)


State 52

  104 returnstmt: RETURN semicolon •

    $default  reduce using rule 104 (returnstmt)


State 53

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
  105 returnstmt: RETURN expr • semicolon

    AND        shift, and go to state 72
    OR         shift, and go to state 73
    plus       shift, and go to state 74
    minus      shift, and go to state 75
    MUL        shift, and go to state 76
    DIV        shift, and go to state 77
    MOD        shift, and go to state 78
    eequal     shift, and go to state 79
    nequal     shift, and go to state 80
    greater    shift, and go to state 81
    lesser     shift, and go to state 82
    gequal     shift, and go to state 83
    lequal     shift, and go to state 84
    semicolon  shift, and go to state 110


State 54

    9 stmt: BREAK semicolon •

    $default  reduce using rule 9 (stmt)


State 55

   10 stmt: CONTINUE semicolon •

    $default  reduce using rule 10 (stmt)


State 56

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   35 term: NOT expr •

    $default  reduce using rule 35 (term)


State 57

   49 lvalue: local ID •

    $default  reduce using rule 49 (lvalue)


State 58

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   34 term: minus expr •

    $default  reduce using rule 34 (term)


State 59

   58 call: openPar • funcdef closePar openPar elist closePar

    FUNCTION  shift, and go to state 8

    funcPre      go to state 37
    funcPreArgs  go to state 38
    funcdef      go to state 111


State 60

   36 term: pplus lvalue •
   52 member: lvalue • dot ID
   53       | lvalue • openBracket expr closeBracket
   57 call: lvalue • callsuffix

    openBracket  shift, and go to state 89
    openPar      shift, and go to state 90
    dot          shift, and go to state 91
    ddot         shift, and go to state 92

    $default  reduce using rule 36 (term)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 61

   54 member: call • dot ID
   55       | call • openBracket expr closeBracket
   56 call: call • openPar elist closePar

    openBracket  shift, and go to state 96
    openPar      shift, and go to state 97
    dot          shift, and go to state 98


State 62

   38 term: mminus lvalue •
   52 member: lvalue • dot ID
   53       | lvalue • openBracket expr closeBracket
   57 call: lvalue • callsuffix

    openBracket  shift, and go to state 89
    openPar      shift, and go to state 90
    dot          shift, and go to state 91
    ddot         shift, and go to state 92

    $default  reduce using rule 38 (term)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 63

   72 block: openBlock $@6 • stmtlist closeBlock

    $default  reduce using rule 3 (stmtlist)

    stmtlist  go to state 112


State 64

   70 indexedelem: openBlock • expr colon expr closeBlock

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 113
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 65

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   63 elist: expr •

    AND      shift, and go to state 72
    OR       shift, and go to state 73
    plus     shift, and go to state 74
    minus    shift, and go to state 75
    MUL      shift, and go to state 76
    DIV      shift, and go to state 77
    MOD      shift, and go to state 78
    eequal   shift, and go to state 79
    nequal   shift, and go to state 80
    greater  shift, and go to state 81
    lesser   shift, and go to state 82
    gequal   shift, and go to state 83
    lequal   shift, and go to state 84

    $default  reduce using rule 63 (elist)


State 66

   64 elist: elist • comma expr
   66 objectdef: openBracket elist • closeBracket

    closeBracket  shift, and go to state 114
    comma         shift, and go to state 115


State 67

   67 objectdef: openBracket indexed • closeBracket
   69 indexed: indexed • comma indexedelem

    closeBracket  shift, and go to state 116
    comma         shift, and go to state 117


State 68

   68 indexed: indexedelem •

    $default  reduce using rule 68 (indexed)


State 69

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   33 term: openPar expr • closePar

    AND       shift, and go to state 72
    OR        shift, and go to state 73
    plus      shift, and go to state 74
    minus     shift, and go to state 75
    MUL       shift, and go to state 76
    DIV       shift, and go to state 77
    MOD       shift, and go to state 78
    eequal    shift, and go to state 79
    nequal    shift, and go to state 80
    greater   shift, and go to state 81
    lesser    shift, and go to state 82
    gequal    shift, and go to state 83
    lequal    shift, and go to state 84
    closePar  shift, and go to state 118


State 70

   46 primary: openPar funcdef • closePar
   58 call: openPar funcdef • closePar openPar elist closePar

    closePar  shift, and go to state 119


State 71

   50 lvalue: ccolon ID •

    $default  reduce using rule 50 (lvalue)


State 72

   29 expr: expr AND • $@3 M expr

    $default  reduce using rule 28 ($@3)

    $@3  go to state 120


State 73

   31 expr: expr OR • $@4 M expr

    $default  reduce using rule 30 ($@4)

    $@4  go to state 121


State 74

   15 expr: expr plus • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 122
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 75

   16 expr: expr minus • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 123
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 76

   17 expr: expr MUL • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 124
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 77

   18 expr: expr DIV • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 125
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 78

   19 expr: expr MOD • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 126
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 79

   25 expr: expr eequal • $@1 expr

    $default  reduce using rule 24 ($@1)

    $@1  go to state 127


State 80

   27 expr: expr nequal • $@2 expr

    $default  reduce using rule 26 ($@2)

    $@2  go to state 128


State 81

   20 expr: expr greater • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 129
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 82

   22 expr: expr lesser • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 130
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 83

   21 expr: expr gequal • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 131
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 84

   23 expr: expr lequal • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 132
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 85

    4 stmt: expr semicolon •

    $default  reduce using rule 4 (stmt)


State 86

   42 assignexpr: lvalue equal • $@5 expr

    $default  reduce using rule 41 ($@5)

    $@5  go to state 133


State 87

   37 term: lvalue pplus •

    $default  reduce using rule 37 (term)


State 88

   39 term: lvalue mminus •

    $default  reduce using rule 39 (term)


State 89

   53 member: lvalue openBracket • expr closeBracket

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 134
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 90

   61 normcall: openPar • elist closePar

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 135
    objectdef   go to state 35
    const       go to state 40


State 91

   52 member: lvalue dot • ID

    ID  shift, and go to state 136


State 92

   62 methodcall: ddot • ID openPar elist closePar

    ID  shift, and go to state 137


State 93

   57 call: lvalue callsuffix •

    $default  reduce using rule 57 (call)


State 94

   59 callsuffix: normcall •

    $default  reduce using rule 59 (callsuffix)


State 95

   60 callsuffix: methodcall •

    $default  reduce using rule 60 (callsuffix)


State 96

   55 member: call openBracket • expr closeBracket

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 138
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 97

   56 call: call openPar • elist closePar

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 139
    objectdef   go to state 35
    const       go to state 40


State 98

   54 member: call dot • ID

    ID  shift, and go to state 140


State 99

   73 funcArgs: openPar • idlist closePar

    ID  shift, and go to state 141

    $default  reduce using rule 89 (idlist)

    idlist  go to state 142


State 100

   77 funcPreArgs: funcPre funcArgs •

    $default  reduce using rule 77 (funcPreArgs)


State 101

   81 funcdef: funcPreArgs funcBlockStart • funcBody funcBlockEnd

    openBlock  shift, and go to state 22

    block     go to state 143
    funcBody  go to state 144


State 102

   92 ifstmt: ifPrefix stmt •

    $default  reduce using rule 92 (ifstmt)


State 103

   91 elsePrefix: ELSE •

    $default  reduce using rule 91 (elsePrefix)


State 104

   93 ifstmt: ifstmt elsePrefix • stmt

    NUMBER       shift, and go to state 4
    IF           shift, and go to state 5
    WHILE        shift, and go to state 6
    FOR          shift, and go to state 7
    FUNCTION     shift, and go to state 8
    RETURN       shift, and go to state 9
    BREAK        shift, and go to state 10
    CONTINUE     shift, and go to state 11
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBlock    shift, and go to state 22
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    semicolon    shift, and go to state 25
    ccolon       shift, and go to state 26

    stmt         go to state 145
    expr         go to state 28
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    objectdef    go to state 35
    block        go to state 36
    funcPre      go to state 37
    funcPreArgs  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifPrefix     go to state 41
    ifstmt       go to state 42
    whileStart   go to state 43
    whilestmt    go to state 44
    forPrefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 105

   98 whileCond: openPar • expr closePar

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 146
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 106

   99 whilestmt: whileStart whileCond • loopstmt

    $default  reduce using rule 94 (loopStart)

    loopStart  go to state 147
    loopstmt   go to state 148


State 107

  103 forstmt: forPrefix N • elist closePar N loopstmt N

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 149
    objectdef   go to state 35
    const       go to state 40


State 108

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   90 ifPrefix: IF openPar expr • closePar

    AND       shift, and go to state 72
    OR        shift, and go to state 73
    plus      shift, and go to state 74
    minus     shift, and go to state 75
    MUL       shift, and go to state 76
    DIV       shift, and go to state 77
    MOD       shift, and go to state 78
    eequal    shift, and go to state 79
    nequal    shift, and go to state 80
    greater   shift, and go to state 81
    lesser    shift, and go to state 82
    gequal    shift, and go to state 83
    lequal    shift, and go to state 84
    closePar  shift, and go to state 150


State 109

   64 elist: elist • comma expr
  102 forPrefix: FOR openPar elist • M semicolon expr semicolon

    comma  shift, and go to state 115

    $default  reduce using rule 101 (M)

    M  go to state 151


State 110

  105 returnstmt: RETURN expr semicolon •

    $default  reduce using rule 105 (returnstmt)


State 111

   58 call: openPar funcdef • closePar openPar elist closePar

    closePar  shift, and go to state 152


State 112

    2 stmtlist: stmtlist • stmt
   72 block: openBlock $@6 stmtlist • closeBlock

    NUMBER       shift, and go to state 4
    IF           shift, and go to state 5
    WHILE        shift, and go to state 6
    FOR          shift, and go to state 7
    FUNCTION     shift, and go to state 8
    RETURN       shift, and go to state 9
    BREAK        shift, and go to state 10
    CONTINUE     shift, and go to state 11
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBlock    shift, and go to state 22
    closeBlock   shift, and go to state 153
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    semicolon    shift, and go to state 25
    ccolon       shift, and go to state 26

    stmt         go to state 27
    expr         go to state 28
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    objectdef    go to state 35
    block        go to state 36
    funcPre      go to state 37
    funcPreArgs  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifPrefix     go to state 41
    ifstmt       go to state 42
    whileStart   go to state 43
    whilestmt    go to state 44
    forPrefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 113

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   70 indexedelem: openBlock expr • colon expr closeBlock

    AND      shift, and go to state 72
    OR       shift, and go to state 73
    plus     shift, and go to state 74
    minus    shift, and go to state 75
    MUL      shift, and go to state 76
    DIV      shift, and go to state 77
    MOD      shift, and go to state 78
    eequal   shift, and go to state 79
    nequal   shift, and go to state 80
    greater  shift, and go to state 81
    lesser   shift, and go to state 82
    gequal   shift, and go to state 83
    lequal   shift, and go to state 84
    colon    shift, and go to state 154


State 114

   66 objectdef: openBracket elist closeBracket •

    $default  reduce using rule 66 (objectdef)


State 115

   64 elist: elist comma • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 155
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 116

   67 objectdef: openBracket indexed closeBracket •

    $default  reduce using rule 67 (objectdef)


State 117

   69 indexed: indexed comma • indexedelem

    openBlock  shift, and go to state 64

    indexedelem  go to state 156


State 118

   33 term: openPar expr closePar •

    $default  reduce using rule 33 (term)


State 119

   46 primary: openPar funcdef closePar •
   58 call: openPar funcdef closePar • openPar elist closePar

    openPar  shift, and go to state 157

    $default  reduce using rule 46 (primary)


State 120

   29 expr: expr AND $@3 • M expr

    $default  reduce using rule 101 (M)

    M  go to state 158


State 121

   31 expr: expr OR $@4 • M expr

    $default  reduce using rule 101 (M)

    M  go to state 159


State 122

   15 expr: expr • plus expr
   15     | expr plus expr •
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    MUL  shift, and go to state 76
    DIV  shift, and go to state 77
    MOD  shift, and go to state 78

    $default  reduce using rule 15 (expr)


State 123

   15 expr: expr • plus expr
   16     | expr • minus expr
   16     | expr minus expr •
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    MUL  shift, and go to state 76
    DIV  shift, and go to state 77
    MOD  shift, and go to state 78

    $default  reduce using rule 16 (expr)


State 124

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   17     | expr MUL expr •
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    $default  reduce using rule 17 (expr)


State 125

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   18     | expr DIV expr •
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    $default  reduce using rule 18 (expr)


State 126

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   19     | expr MOD expr •
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    $default  reduce using rule 19 (expr)


State 127

   25 expr: expr eequal $@1 • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 160
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 128

   27 expr: expr nequal $@2 • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 161
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 129

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   20     | expr greater expr •
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    plus   shift, and go to state 74
    minus  shift, and go to state 75
    MUL    shift, and go to state 76
    DIV    shift, and go to state 77
    MOD    shift, and go to state 78

    greater  error (nonassociative)
    lesser   error (nonassociative)
    gequal   error (nonassociative)
    lequal   error (nonassociative)

    $default  reduce using rule 20 (expr)


State 130

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   22     | expr lesser expr •
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    plus   shift, and go to state 74
    minus  shift, and go to state 75
    MUL    shift, and go to state 76
    DIV    shift, and go to state 77
    MOD    shift, and go to state 78

    greater  error (nonassociative)
    lesser   error (nonassociative)
    gequal   error (nonassociative)
    lequal   error (nonassociative)

    $default  reduce using rule 22 (expr)


State 131

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   21     | expr gequal expr •
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    plus   shift, and go to state 74
    minus  shift, and go to state 75
    MUL    shift, and go to state 76
    DIV    shift, and go to state 77
    MOD    shift, and go to state 78

    greater  error (nonassociative)
    lesser   error (nonassociative)
    gequal   error (nonassociative)
    lequal   error (nonassociative)

    $default  reduce using rule 21 (expr)


State 132

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   23     | expr lequal expr •
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    plus   shift, and go to state 74
    minus  shift, and go to state 75
    MUL    shift, and go to state 76
    DIV    shift, and go to state 77
    MOD    shift, and go to state 78

    greater  error (nonassociative)
    lesser   error (nonassociative)
    gequal   error (nonassociative)
    lequal   error (nonassociative)

    $default  reduce using rule 23 (expr)


State 133

   42 assignexpr: lvalue equal $@5 • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 162
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 134

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   53 member: lvalue openBracket expr • closeBracket

    AND           shift, and go to state 72
    OR            shift, and go to state 73
    plus          shift, and go to state 74
    minus         shift, and go to state 75
    MUL           shift, and go to state 76
    DIV           shift, and go to state 77
    MOD           shift, and go to state 78
    eequal        shift, and go to state 79
    nequal        shift, and go to state 80
    greater       shift, and go to state 81
    lesser        shift, and go to state 82
    gequal        shift, and go to state 83
    lequal        shift, and go to state 84
    closeBracket  shift, and go to state 163


State 135

   61 normcall: openPar elist • closePar
   64 elist: elist • comma expr

    closePar  shift, and go to state 164
    comma     shift, and go to state 115


State 136

   52 member: lvalue dot ID •

    $default  reduce using rule 52 (member)


State 137

   62 methodcall: ddot ID • openPar elist closePar

    openPar  shift, and go to state 165


State 138

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   55 member: call openBracket expr • closeBracket

    AND           shift, and go to state 72
    OR            shift, and go to state 73
    plus          shift, and go to state 74
    minus         shift, and go to state 75
    MUL           shift, and go to state 76
    DIV           shift, and go to state 77
    MOD           shift, and go to state 78
    eequal        shift, and go to state 79
    nequal        shift, and go to state 80
    greater       shift, and go to state 81
    lesser        shift, and go to state 82
    gequal        shift, and go to state 83
    lequal        shift, and go to state 84
    closeBracket  shift, and go to state 166


State 139

   56 call: call openPar elist • closePar
   64 elist: elist • comma expr

    closePar  shift, and go to state 167
    comma     shift, and go to state 115


State 140

   54 member: call dot ID •

    $default  reduce using rule 54 (member)


State 141

   87 idlist: ID •

    $default  reduce using rule 87 (idlist)


State 142

   73 funcArgs: openPar idlist • closePar
   88 idlist: idlist • comma ID

    closePar  shift, and go to state 168
    comma     shift, and go to state 169


State 143

   80 funcBody: block •

    $default  reduce using rule 80 (funcBody)


State 144

   81 funcdef: funcPreArgs funcBlockStart funcBody • funcBlockEnd

    $default  reduce using rule 79 (funcBlockEnd)

    funcBlockEnd  go to state 170


State 145

   93 ifstmt: ifstmt elsePrefix stmt •

    $default  reduce using rule 93 (ifstmt)


State 146

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   98 whileCond: openPar expr • closePar

    AND       shift, and go to state 72
    OR        shift, and go to state 73
    plus      shift, and go to state 74
    minus     shift, and go to state 75
    MUL       shift, and go to state 76
    DIV       shift, and go to state 77
    MOD       shift, and go to state 78
    eequal    shift, and go to state 79
    nequal    shift, and go to state 80
    greater   shift, and go to state 81
    lesser    shift, and go to state 82
    gequal    shift, and go to state 83
    lequal    shift, and go to state 84
    closePar  shift, and go to state 171


State 147

   96 loopstmt: loopStart • stmt loopEnd

    NUMBER       shift, and go to state 4
    IF           shift, and go to state 5
    WHILE        shift, and go to state 6
    FOR          shift, and go to state 7
    FUNCTION     shift, and go to state 8
    RETURN       shift, and go to state 9
    BREAK        shift, and go to state 10
    CONTINUE     shift, and go to state 11
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBlock    shift, and go to state 22
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    semicolon    shift, and go to state 25
    ccolon       shift, and go to state 26

    stmt         go to state 172
    expr         go to state 28
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    objectdef    go to state 35
    block        go to state 36
    funcPre      go to state 37
    funcPreArgs  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifPrefix     go to state 41
    ifstmt       go to state 42
    whileStart   go to state 43
    whilestmt    go to state 44
    forPrefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 148

   99 whilestmt: whileStart whileCond loopstmt •

    $default  reduce using rule 99 (whilestmt)


State 149

   64 elist: elist • comma expr
  103 forstmt: forPrefix N elist • closePar N loopstmt N

    closePar  shift, and go to state 173
    comma     shift, and go to state 115


State 150

   90 ifPrefix: IF openPar expr closePar •

    $default  reduce using rule 90 (ifPrefix)


State 151

  102 forPrefix: FOR openPar elist M • semicolon expr semicolon

    semicolon  shift, and go to state 174


State 152

   58 call: openPar funcdef closePar • openPar elist closePar

    openPar  shift, and go to state 157


State 153

   72 block: openBlock $@6 stmtlist closeBlock •

    $default  reduce using rule 72 (block)


State 154

   70 indexedelem: openBlock expr colon • expr closeBlock

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 175
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 155

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   64 elist: elist comma expr •

    AND      shift, and go to state 72
    OR       shift, and go to state 73
    plus     shift, and go to state 74
    minus    shift, and go to state 75
    MUL      shift, and go to state 76
    DIV      shift, and go to state 77
    MOD      shift, and go to state 78
    eequal   shift, and go to state 79
    nequal   shift, and go to state 80
    greater  shift, and go to state 81
    lesser   shift, and go to state 82
    gequal   shift, and go to state 83
    lequal   shift, and go to state 84

    $default  reduce using rule 64 (elist)


State 156

   69 indexed: indexed comma indexedelem •

    $default  reduce using rule 69 (indexed)


State 157

   58 call: openPar funcdef closePar openPar • elist closePar

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 176
    objectdef   go to state 35
    const       go to state 40


State 158

   29 expr: expr AND $@3 M • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 177
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 159

   31 expr: expr OR $@4 M • expr

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 178
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 160

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   25     | expr eequal $@1 expr •
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    plus     shift, and go to state 74
    minus    shift, and go to state 75
    MUL      shift, and go to state 76
    DIV      shift, and go to state 77
    MOD      shift, and go to state 78
    greater  shift, and go to state 81
    lesser   shift, and go to state 82
    gequal   shift, and go to state 83
    lequal   shift, and go to state 84

    eequal  error (nonassociative)
    nequal  error (nonassociative)

    $default  reduce using rule 25 (expr)


State 161

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   27     | expr nequal $@2 expr •
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr

    plus     shift, and go to state 74
    minus    shift, and go to state 75
    MUL      shift, and go to state 76
    DIV      shift, and go to state 77
    MOD      shift, and go to state 78
    greater  shift, and go to state 81
    lesser   shift, and go to state 82
    gequal   shift, and go to state 83
    lequal   shift, and go to state 84

    eequal  error (nonassociative)
    nequal  error (nonassociative)

    $default  reduce using rule 27 (expr)


State 162

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   42 assignexpr: lvalue equal $@5 expr •

    AND      shift, and go to state 72
    OR       shift, and go to state 73
    plus     shift, and go to state 74
    minus    shift, and go to state 75
    MUL      shift, and go to state 76
    DIV      shift, and go to state 77
    MOD      shift, and go to state 78
    eequal   shift, and go to state 79
    nequal   shift, and go to state 80
    greater  shift, and go to state 81
    lesser   shift, and go to state 82
    gequal   shift, and go to state 83
    lequal   shift, and go to state 84

    $default  reduce using rule 42 (assignexpr)


State 163

   53 member: lvalue openBracket expr closeBracket •

    $default  reduce using rule 53 (member)


State 164

   61 normcall: openPar elist closePar •

    $default  reduce using rule 61 (normcall)


State 165

   62 methodcall: ddot ID openPar • elist closePar

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 179
    objectdef   go to state 35
    const       go to state 40


State 166

   55 member: call openBracket expr closeBracket •

    $default  reduce using rule 55 (member)


State 167

   56 call: call openPar elist closePar •

    $default  reduce using rule 56 (call)


State 168

   73 funcArgs: openPar idlist closePar •

    $default  reduce using rule 73 (funcArgs)


State 169

   88 idlist: idlist comma • ID

    ID  shift, and go to state 180


State 170

   81 funcdef: funcPreArgs funcBlockStart funcBody funcBlockEnd •

    $default  reduce using rule 81 (funcdef)


State 171

   98 whileCond: openPar expr closePar •

    $default  reduce using rule 98 (whileCond)


State 172

   96 loopstmt: loopStart stmt • loopEnd

    $default  reduce using rule 95 (loopEnd)

    loopEnd  go to state 181


State 173

  103 forstmt: forPrefix N elist closePar • N loopstmt N

    $default  reduce using rule 100 (N)

    N  go to state 182


State 174

  102 forPrefix: FOR openPar elist M semicolon • expr semicolon

    NUMBER       shift, and go to state 4
    NOT          shift, and go to state 12
    local        shift, and go to state 13
    TRUE         shift, and go to state 14
    FALSE        shift, and go to state 15
    NIL          shift, and go to state 16
    STRING       shift, and go to state 17
    ID           shift, and go to state 18
    minus        shift, and go to state 19
    pplus        shift, and go to state 20
    mminus       shift, and go to state 21
    openBracket  shift, and go to state 23
    openPar      shift, and go to state 24
    ccolon       shift, and go to state 26

    expr        go to state 183
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 40


State 175

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   70 indexedelem: openBlock expr colon expr • closeBlock

    AND         shift, and go to state 72
    OR          shift, and go to state 73
    plus        shift, and go to state 74
    minus       shift, and go to state 75
    MUL         shift, and go to state 76
    DIV         shift, and go to state 77
    MOD         shift, and go to state 78
    eequal      shift, and go to state 79
    nequal      shift, and go to state 80
    greater     shift, and go to state 81
    lesser      shift, and go to state 82
    gequal      shift, and go to state 83
    lequal      shift, and go to state 84
    closeBlock  shift, and go to state 184


State 176

   58 call: openPar funcdef closePar openPar elist • closePar
   64 elist: elist • comma expr

    closePar  shift, and go to state 185
    comma     shift, and go to state 115


State 177

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   29     | expr AND $@3 M expr •
   31     | expr • OR $@4 M expr

    plus     shift, and go to state 74
    minus    shift, and go to state 75
    MUL      shift, and go to state 76
    DIV      shift, and go to state 77
    MOD      shift, and go to state 78
    eequal   shift, and go to state 79
    nequal   shift, and go to state 80
    greater  shift, and go to state 81
    lesser   shift, and go to state 82
    gequal   shift, and go to state 83
    lequal   shift, and go to state 84

    $default  reduce using rule 29 (expr)


State 178

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
   31     | expr OR $@4 M expr •

    AND      shift, and go to state 72
    plus     shift, and go to state 74
    minus    shift, and go to state 75
    MUL      shift, and go to state 76
    DIV      shift, and go to state 77
    MOD      shift, and go to state 78
    eequal   shift, and go to state 79
    nequal   shift, and go to state 80
    greater  shift, and go to state 81
    lesser   shift, and go to state 82
    gequal   shift, and go to state 83
    lequal   shift, and go to state 84

    $default  reduce using rule 31 (expr)


State 179

   62 methodcall: ddot ID openPar elist • closePar
   64 elist: elist • comma expr

    closePar  shift, and go to state 186
    comma     shift, and go to state 115


State 180

   88 idlist: idlist comma ID •

    $default  reduce using rule 88 (idlist)


State 181

   96 loopstmt: loopStart stmt loopEnd •

    $default  reduce using rule 96 (loopstmt)


State 182

  103 forstmt: forPrefix N elist closePar N • loopstmt N

    $default  reduce using rule 94 (loopStart)

    loopStart  go to state 147
    loopstmt   go to state 187


State 183

   15 expr: expr • plus expr
   16     | expr • minus expr
   17     | expr • MUL expr
   18     | expr • DIV expr
   19     | expr • MOD expr
   20     | expr • greater expr
   21     | expr • gequal expr
   22     | expr • lesser expr
   23     | expr • lequal expr
   25     | expr • eequal $@1 expr
   27     | expr • nequal $@2 expr
   29     | expr • AND $@3 M expr
   31     | expr • OR $@4 M expr
  102 forPrefix: FOR openPar elist M semicolon expr • semicolon

    AND        shift, and go to state 72
    OR         shift, and go to state 73
    plus       shift, and go to state 74
    minus      shift, and go to state 75
    MUL        shift, and go to state 76
    DIV        shift, and go to state 77
    MOD        shift, and go to state 78
    eequal     shift, and go to state 79
    nequal     shift, and go to state 80
    greater    shift, and go to state 81
    lesser     shift, and go to state 82
    gequal     shift, and go to state 83
    lequal     shift, and go to state 84
    semicolon  shift, and go to state 188


State 184

   70 indexedelem: openBlock expr colon expr closeBlock •

    $default  reduce using rule 70 (indexedelem)


State 185

   58 call: openPar funcdef closePar openPar elist closePar •

    $default  reduce using rule 58 (call)


State 186

   62 methodcall: ddot ID openPar elist closePar •

    $default  reduce using rule 62 (methodcall)


State 187

  103 forstmt: forPrefix N elist closePar N loopstmt • N

    $default  reduce using rule 100 (N)

    N  go to state 189


State 188

  102 forPrefix: FOR openPar elist M semicolon expr semicolon •

    $default  reduce using rule 102 (forPrefix)


State 189

  103 forstmt: forPrefix N elist closePar N loopstmt N •

    $default  reduce using rule 103 (forstmt)
